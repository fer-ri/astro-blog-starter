---
import { type CollectionEntry, getCollection } from "astro:content";
import MainLayout from "@/layouts/main.layout.astro";
import FormattedDate from "@/components/formatted-date.component.astro";
import Toc from "@/components/toc.component.astro";
import PostSummary from "@/components/post-summary.component.astro";
import Tag from "@/components/tag.component.astro";
import PostMeta from "@/components/post-meta.component.astro";
import { slugify } from "@/utils";
import Separator from "@/components/separator.component.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;

const { Content, remarkPluginFrontmatter, headings } = await post.render();

const { title, pubDate, heroImage, tags } = post.data;

const { slug } = Astro.params;

const randomPosts = (await getCollection("blog"))
  .filter((item) => item.slug !== post.slug)
  .slice(0, 3);
---

<MainLayout {...post.data}>
  <section>
    <header class="flex flex-col gap-8 md:flex-row md:pb-2">
      <div
        transition:name={`hero-${slug}`}
        class="rounded-2xl overflow-hidden w-48 h-48 shrink-0 hidden md:block"
      >
        <img
          src={heroImage}
          alt={title}
          loading="lazy"
          decoding="async"
          class="object-cover object-center aspect-square block"
        />
      </div>

      <div class="flex flex-col gap-2" transition:name={`header-${slug}`}>
        {
          post.data.category && (
            <a
              href={`/category/${slugify(post.data.category)}`}
              class="text-xs relative text-purple-600 hover:underline"
            >
              {post.data.category}
            </a>
          )
        }

        <h1 class="font-bold text-3xl md:text-5xl">
          {title}
        </h1>

        <PostMeta
          date={post.data.pubDate}
          minutesRead={remarkPluginFrontmatter.minutesRead}
        />

        {tags && <Tag tags={tags} />}
      </div>
    </header>

    <Separator />

    <article class="relative prose max-w-none md:prose-xl dark:prose-dark">
      {headings.length > 0 && <Toc headings={headings} />}
      <Content />
    </article>
  </section>

  {
    randomPosts.length > 0 && (
      <>
        <Separator />

        <section>
          <h3 class="font-medium text-3xl mb-8">Next</h3>

          <div class="space-y-8 md:space-y-12">
            {randomPosts.map((post) => (
              <PostSummary post={post} />
            ))}
          </div>
        </section>
      </>
    )
  }
</MainLayout>
